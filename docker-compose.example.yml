version: '3'

services:
# The NGINX web/reverse-proxy server.
  nginx-proxy:
    restart: always
    depends_on:
      - app
    networks:
      - anx-api-proxy-network
    image: nginx:latest
    ports:
      - 9088:80
    volumes:
      - "./.docker/conf/site.conf:/etc/nginx/conf.d/default.conf"
      - "./public:/var/www/public:ro"
      # Remove the comment below to enable nginx logs.
      #- "./logs/:/var/log/nginx/"

# The Laravel app.
  app:
    restart: always
    depends_on:
      - dbhost
    networks:
      - anx-api-proxy-network
    image: laradock/php-fpm:2.2-7.2
    volumes:
      - "./:/var/www"

# The database server.
  dbhost:
    restart: always
    image: mariadb:10.2
    networks:
      - anx-api-proxy-network
    hostname: dbhost
    command: ["mysqld", "--innodb-buffer-pool-size=1G"]
    environment:
      - "MYSQL_ROOT_PASSWORD=secret"
      - "MYSQL_DATABASE=anxproxy"
      - "MYSQL_USER=homestead"
      - "MYSQL_PASSWORD=secret"
    volumes:
      - "./.docker/conf/my.cnf:/etc/mysql/my.cnf:ro"
      - "./.docker/data/mysql:/var/lib/mysql:rw"
# The reason you want to physically mount /var/lib/mysql
# because I don't trust docker.  There are instances
# when docker can become unresponsive and the only
# way to get it back is to start from scratch
# by deleting rm -rf /var/lib/docker/*
#
# Using docker volume means you will loose your data
# but redis is fine if we're just using it like
# memcache.


# The redis caching server.
# redis:
#   image: redis:4-alpine
#   restart: always
#   hostname: redis
#   command: ["redis-server", "--appendonly", "yes"]
#   networks:
#     - anx-api-proxy-network
#   volumes:
#     - redis-data:/data

# (Optional) A PHPMyAdmin web interface for the database.
#    phpmyadmin:
#      depends_on:
#        - dbhost
#      image: phpmyadmin/phpmyadmin
#      restart: always
#      ports:
#        - 8080:80
#      environment:
#        PMA_HOST: db
#      networks:
#        - anx-api-proxy-network

networks:
  anx-api-proxy-network:

volumes:
  redis-data:
